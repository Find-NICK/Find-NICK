<svg xmlns="http://www.w3.org/2000/svg" width="480" height="2228" class="">
    <defs>
        <style/>
    </defs>
    <style>@keyframes animation-gauge{0%{stroke-dasharray:0 329}}@keyframes animation-rainbow{0%,to{color:#7f00ff;fill:#7f00ff}14%{color:#a933ff;fill:#a933ff}29%{color:#007fff;fill:#007fff}43%{color:#00ff7f;fill:#00ff7f}57%{color:#ff0;fill:#ff0}71%{color:#ff7f00;fill:#ff7f00}86%{color:red;fill:red}}svg{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;font-size:14px;color:#777}h2{margin:8px 0 2px;padding:0;color:#0366d6;font-weight:400;font-size:16px}h2 svg{fill:currentColor}section&gt;.field{margin-left:5px;margin-right:5px}.field{display:flex;align-items:center;margin-bottom:2px;white-space:nowrap}.field svg{margin:0 8px;fill:#959da5;flex-shrink:0}.row{display:flex;flex-wrap:wrap}.row section{flex:1 1 0}.chartist .ct-post{fill:rgba(127,127,127,.8)!important;color:rgba(127,127,127,.8)!important;font-size:9px;text-anchor:middle}.categories{display:flex;align-items:center;justify-content:space-around;margin-top:4px}.post{align-items:flex-start}.deleted{color:#da3633}.snippet .body{padding-left:12px}.snippet .language-diff{font-size:77%}.snippet.additions{color:#336543}.snippet.deletions{color:#9a5256}.markdown b,.markdown i{display:inline-block;width:97%}.markdown p{margin:8px 0}.markdown a{color:#58a6ff;text-decoration:none}code,span.code{background-color:#7777771f;padding:1px 5px;font-size:80%;border-radius:6px;color:#777;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace}code{display:inline-block}code[class^=language-]{white-space:pre-wrap;width:97%;margin-top:4px}span.code{margin:0 4px -3px}.token.namespace{color:#b44418}.token.string{color:#2777aa}.token.coord{color:#d2a8ff;font-weight:700}.token.inserted:not(.prefix){color:#aad0b4dc;background-color:#336543dc}.token.deleted:not(.prefix){color:#eed2d0dc;background-color:#9a5256dc}.space{margin-left:7px}.blue{color:#58a6ff}:root{--color-calendar-graph-day-bg:#ebedf0;--color-calendar-graph-day-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-bg:#9be9a8;--color-calendar-graph-day-L2-bg:#40c463;--color-calendar-graph-day-L3-bg:#30a14e;--color-calendar-graph-day-L4-bg:#216e39;--color-calendar-halloween-graph-day-L1-bg:#ffee4a;--color-calendar-halloween-graph-day-L2-bg:#ffc501;--color-calendar-halloween-graph-day-L3-bg:#fe9600;--color-calendar-halloween-graph-day-L4-bg:#03001c;--color-calendar-winter-graph-day-L1-bg:#0a3069;--color-calendar-winter-graph-day-L2-bg:#0969da;--color-calendar-winter-graph-day-L3-bg:#54aeff;--color-calendar-winter-graph-day-L4-bg:#b6e3ff;--color-calendar-graph-day-L4-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L3-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L2-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-border:rgba(27,31,35,0.06)}#metrics-end{width:100%}</style>
    <style/>
    <foreignObject x="0" y="0" width="100%" height="100%">
        <div xmlns="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" class="items-wrapper">
            <section>
                <h2 class="field">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                        <path fill-rule="evenodd" d="M4 1.75C4 .784 4.784 0 5.75 0h5.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v8.586A1.75 1.75 0 0114.25 15h-9a.75.75 0 010-1.5h9a.25.25 0 00.25-.25V6h-2.75A1.75 1.75 0 0110 4.25V1.5H5.75a.25.25 0 00-.25.25v2.5a.75.75 0 01-1.5 0v-2.5zm7.5-.188V4.25c0 .138.112.25.25.25h2.688a.252.252 0 00-.011-.013l-2.914-2.914a.272.272 0 00-.013-.011zM5.72 6.72a.75.75 0 000 1.06l1.47 1.47-1.47 1.47a.75.75 0 101.06 1.06l2-2a.75.75 0 000-1.06l-2-2a.75.75 0 00-1.06 0zM3.28 7.78a.75.75 0 00-1.06-1.06l-2 2a.75.75 0 000 1.06l2 2a.75.75 0 001.06-1.06L1.81 9.25l1.47-1.47z"/>
                    </svg>
                    Code snippet of the day
                </h2>
                <div class="row">
                    <section class="largeable-column-fields">
                        <div class="field">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"/>
                            </svg>
                            From
                            <span class="blue space">Find-NICK/find-nick.github.io</span>
                        </div>
                    </section>
                </div>
                <div class="row">
                    <section class="largeable-column-fields">
                        <div class="field">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M10.5 7.75a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zm1.43.75a4.002 4.002 0 01-7.86 0H.75a.75.75 0 110-1.5h3.32a4.001 4.001 0 017.86 0h3.32a.75.75 0 110 1.5h-3.32z"/>
                            </svg>
                            update
                        </div>
                        <div class="field">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z"/>
                            </svg>
                            <span class="code">e04dec8f</span>
                            <span class="code">index.json</span>
                            <span class="code"><span class="snippet additions">++1</span> <span class="snippet deletions">--1</span></span>
                        </div>
                    </section>
                </div>
                <div class="row">
                    <section class="snippet">
                        <div class="body markdown">
                            <code class="language-diff" xml:space="preserve"><span class="token coord">@@ -1 +1 @@</span><br /><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">[{"categories":null,"contents":"字符串哈希,是一种能将字符串映射成非负整数的算法.\n一般使用BKDR Hash进行哈希计算.\n具体做法是,将字符串看作一个 $b$ 进制的数字,计算它在十进制下的数值.\n由于在字符串足够长时数字会过大,因此一般会取模一个大质数.\n参考代码(只包含a-z的字符串):\nconst int mod=1e9+7,b=27; int getstrhash(string str){ int len=str.size(); int ans=0; for(int i=0;i\u0026lt;len;i++){ ans=((long long)ans*b+(str[i]-\u0026#39;a\u0026#39;+1))%mod; } return ans; } 注意:如果使用上面的做法,注意是str[i]-'a'+1,否则aab和ab的哈希值相同.\n上面这种方法因为在实际使用时涉及到大量取模操作,所以通常利用unsigned long long类型溢出自动取模 $2^{64}-1$的性质,使用下面这种方法:\nconst int b=27; unsigned long long getstrhash(string str){ int len=str.size(); unsigned long long ans=0; for(int i=0;i\u0026lt;len;i++){ ans=ans*b+(str[i]-\u0026#39;a\u0026#39;+1); } return ans; } 求子串哈希\n如果要计算子串哈希(比较子串是否相等),直接暴力计算,单次查询 $O(n)$ 复杂度.\n使用类似前缀和的思想可以优化此过程.\n具体做法是,预处理字符串(假设为str)的每个前缀哈希,利用求哈希时将字符串看作一个 $b$ 进制数的特点,将哈希值\u0026quot;左移\u0026quot;后相减.\n例子:给定字符串 $s=\u0026ldquo;abb\u0026rdquo;$,求 $\u0026ldquo;bb\u0026rdquo;$ 的哈希值.\n预处理出前缀哈希值\n$pre[0]=1*27^0=1$\n$pre[1]=1*27^1+2*27^0=29$\n$pre[2]=1*27^2+2*27^1+2*27^0=785 $\n然后结果为$pre[2]-pre[0]*27^2$.\n参考代码\nint getsubstrhash(string str,int l,int r){ return pre[r]-pre[l-1]*powofbase[r-l+1]; //powofbase[i]为b的i次方 } ","date":"2023-09-17T21:27:58+08:00","permalink":"https://findnick.top/post/stringhash/","section":"post","tags":["algorithm"],"title":"字符串哈希"},{"categories":null,"contents":"可以发现,当第 $ i $ 个订单可以满足时,第 $ i-1 $ 个订单也可以满足.\n于是可以想到二分答案求解,差分计算每个订单,复杂度 $ O(n\\log{n}) $ .\n#include\u0026lt;cstdio\u0026gt; #include\u0026lt;cstring\u0026gt; #include\u0026lt;algorithm\u0026gt; using namespace std; long long num[1000006]; long long r[1000006],n,m,res; struct Node{ long long l,r,k; }node[1000006]; int check(long long x){ res=0; memset(num,0,sizeof num); for(int i=1;i\u0026lt;=x;i++){ num[node[i].l]+=node[i].k; num[node[i].r+1]-=node[i].k; } for(int i=1;i\u0026lt;=n;i++){ res+=num[i]; if(res\u0026gt;r[i]){ return 0; } } return 1; } int main(){ scanf(\u0026#34;%lld%lld\u0026#34;,\u0026amp;n,\u0026amp;m); for(int i=1;i\u0026lt;=n;i++){ scanf(\u0026#34;%lld\u0026#34;,\u0026amp;r[i]); } for(int i=1;i\u0026lt;=m;i++){ scanf(\u0026#34;%lld%lld%lld\u0026#34;,\u0026amp;node[i].k,\u0026amp;node[i].l,\u0026amp;node[i].r); } long long l=0,r=m; while(l\u0026lt;r){ long long mid=(l+r+1)\u0026gt;\u0026gt;1; if(check(mid)){ l=mid; } else{ r=mid-1; } } if(l==m){ printf(\u0026#34;0\u0026#34;); } else{ printf(\u0026#34;-1\\n%d\u0026#34;,l+1); } return 0; } 注意开long long(大悲)\n","date":"2023-08-14T13:42:13+08:00","permalink":"https://findnick.top/post/luogu-p1083/","section":"post","tags":["algorithm","solution"],"title":"洛谷P1083"},{"categories":null,"contents":"$ O(n) $ 做法\n首先预处理一个数组res[i],表示第 $ 1 $ 到 $ i $ 的客栈中编号最大且满足最低消费小于等于q的客栈编号;\n维护一个前缀和数组ans[i][j],i为颜色,j为编号, $ O(1) $ 求出 1~j 中有多少个颜色为i的客栈;\n枚举较大的客栈的编号i,1~res[i] 是不考虑颜色因素所能选的区间,ans[i][res[i]]即是右端点为i时的答案.\n注意当res[i]=i时,因为一个客栈不能选两次,因此答案要减一.\n累加即可.\n#include\u0026lt;cstdio\u0026gt; #include\u0026lt;cstring\u0026gt; using namespace std; int n,k,p; int a[200005],b,res[200005],ans[55][200005]; long long ret=0; int main(){ memset(res,-1,sizeof res); scanf(\u0026#34;%d%d%d\u0026#34;,\u0026amp;n,\u0026amp;k,\u0026amp;p); for(int i=1;i\u0026lt;=n;i++){ scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;a[i],\u0026amp;b); if(b\u0026lt;=p){ res[i]=i; } else{ res[i]=res[i-1]; } } for(int i=1;i\u0026lt;=n;i++){ for(int type=0;type\u0026lt;=k;type++){ ans[type][i]=ans[type][i-1]; if(a[i]==type){ ans[type][i]++; } } } for(int i=1;i\u0026lt;=n;i++){ if(i==res[i]){ ret--; } ret+=ans[a[i]][res[i]]; } printf(\u0026#34;%lld\u0026#34;,ret); return 0; } ","date":"2023-08-14T13:41:59+08:00","permalink":"https://findnick.top/post/luogu-p1311/","section":"post","tags":["algorithm","solution"],"title":"洛谷P1311"},{"categories":null,"contents":"前缀和 作用:求区间和\n时间复杂度: $ O(n) $ 预处理, $ O(1) $ 查询.\n预处理 假设原数组为$ a_1,a_2,a_3,\u0026hellip; $\n前缀和数组\n$ sum_1=a_1 $\n$ sum_2=a_1+a_2=sum_1+a_2 $\n$ sum_3=a_1+a_2+a_3=sum_2+a_3 $\n$ \u0026hellip; $\n查询 查询 $ [l,r] $ 区间内和：\n$ a_l+a_{l+1}+a_{l+2}+\u0026hellip;+a_{r-1}+a_{r} $\n$ =(a_1+a_2+\u0026hellip;+a_{r-1}+a_r)-(a_1+a_2+\u0026hellip;+a_{l-2}+a_{l-1}) $\n$ =sum_r-sum_{l-1} $\n差分 作用:区间加\n时间复杂度: $ O(n) $ 预处理, $ O(1) $ 修改.\n本质上是前缀和的逆运算.\n区间加 通过对前缀和的研究,可以发现,当 a[k] 增加了 x 时,\nsum[k],sum[k+1], $ \u0026hellip; $ 都增加了 $ x $ .\n这样就实现了区间加.\n对 $ [l,r] $ 区间进行加 $ x $ 操作时,只需将 sum[l] 增加 x , 并将 sum[r+1] 增加 -x 即可.\n预处理 求差分数组 d (将原数组 a 当作前缀和).\na[i]=a[i-1]+d[i]\n移项,\na[i]-a[i-1]=d[i]\n这样就完成了转换.\n应用 二维前缀和 预处理 基于容斥原理.\nsum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+a[i][j]\n查询 求 $ (x_1,y_1) $ 到 $ (x_2,y_2) $ 的和.\n$ \\sum_{i=x_1}^{x_2} \\sum_{j=y_1}^{y_2} a_{i,j} $ = sum[x2][y2]-sum[x1-1][y2]-sum[x2][y1-1]+sum[x1-1][y1-1].\n","date":"2023-08-11T21:27:09+08:00","permalink":"https://findnick.top/post/prefixsum/","section":"post","tags":["algorithm"],"title":"前缀和\u0026差分"},{"categories":null,"contents":"在互联网上属于FN的小角落.\n","date":"2023-08-10T20:40:09+08:00","permalink":"https://findnick.top/about/","section":"","tags":null,"title":"About"},{"categories":null,"contents":"前提条件-满足单调性 满足单调性:\n✅✅✅✅✅✅❌❌❌❌ (求最大值)\n❌❌❌✅✅✅✅✅✅✅ (求最小值)\n不满足单调性:\n✅❌✅✅✅❌ (建议直接暴力)\n求最大值 例子 在✅✅✅✅✅✅❌❌❌❌中查找最大的✅\n$ L=1,R=10,MID=(1+10+1)/2=6 $\n✅✅✅✅✅✅❌❌❌❌\n满足,所以 $ L=MID=6 $\n$ L=6,R=10,MID=(6+10+1)/2=8 $\n✅✅✅✅✅✅❌❌❌❌\n不满足,所以 $ R=MID-1=7 $\n$ L=6,R=7,mid=(6+7+1)/2=7 $\n✅✅✅✅✅✅❌❌❌❌\n不满足,所以 $ R=MID-1=6 $\n因为 $ L=R $ ,所以二分结束.\ncode while(l\u0026lt;r){ int mid=(l+r+1)/2; if(check(mid)){ l=mid; } else{ r=mid-1; } } 求最小值 例子 在❌❌❌✅✅✅✅✅✅✅中查找最小的✅\n$ L=1,R=10,MID=(1+10)/2=5 $\n❌❌❌✅✅✅✅✅✅✅\n满足,所以 $ R=MID=5 $\n$ L=1,R=5,MID=(1+5)/2=3 $\n❌❌❌✅✅✅✅✅✅✅\n不满足,所以 $ L=MID+1=4 $\n$ L=4,R=5,MID=(4+5)/2=4 $\n❌❌❌✅✅✅✅✅✅✅\n满足,所以 $ R=4 $\n因为 $ L=R $ ,所以二分结束.\ncode while(l\u0026lt;r) { long long mid=(l+r)/2; if(check(mid)) { r=mid; } else { l=mid+1; } } ","date":"2023-08-10T20:13:23+08:00","permalink":"https://findnick.top/post/binary-search/","section":"post","tags":["algorithm"],"title":"二分"}]<br /></span></span>\No newline at end of file<br /><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[{"categories":null,"contents":"字符串哈希,是一种能将字符串映射成非负整数的算法.\n一般使用BKDR Hash进行哈希计算.\n具体做法是,将字符串看作一个 $b$ 进制的数字,计算它在十进制下的数值.\n由于在字符串足够长时数字会过大,因此一般会取模一个大质数.\n参考代码(只包含a-z的字符串):\nconst int mod=1e9+7,b=27; int getstrhash(string str){ int len=str.size(); int ans=0; for(int i=0;i\u0026lt;len;i++){ ans=((long long)ans*b+(str[i]-\u0026#39;a\u0026#39;+1))%mod; } return ans; } 注意:如果使用上面的做法,注意是str[i]-'a'+1,否则aab和ab的哈希值相同.\n上面这种方法因为在实际使用时涉及到大量取模操作,所以通常利用unsigned long long类型溢出自动取模 $2^{64}-1$的性质,使用下面这种方法:\nconst int b=27; unsigned long long getstrhash(string str){ int len=str.size(); unsigned long long ans=0; for(int i=0;i\u0026lt;len;i++){ ans=ans*b+(str[i]-\u0026#39;a\u0026#39;+1); } return ans; } 求子串哈希\n如果要计算子串哈希(比较子串是否相等),直接暴力计算,单次查询 $O(n)$ 复杂度.\n使用类似前缀和的思想可以优化此过程.\n具体做法是,预处理字符串(假设为str)的每个前缀哈希,利用求哈希时将字符串看作一个 $b$ 进制数的特点,将哈希值\u0026quot;左移\u0026quot;后相减.\n例子:给定字符串 $s=\u0026ldquo;abb\u0026rdquo;$,求 $\u0026ldquo;bb\u0026rdquo;$ 的哈希值.\n预处理出前缀哈希值\n$pre[0]=1*27^0=1$\n$pre[1]=1*27^1+2*27^0=29$\n$pre[2]=1*27^2+2*27^1+2*27^0=785 $\n然后结果为$pre[2]-pre[0]*27^2$.\n参考代码\nint getsubstrhash(int l,int r){ return pre[r]-pre[l-1]*powofbase[r-l+1]; //powofbase[i]为b的i次方 } ","date":"2023-09-17T21:27:58+08:00","permalink":"https://findnick.top/post/stringhash/","section":"post","tags":["algorithm"],"title":"字符串哈希"},{"categories":null,"contents":"可以发现,当第 $ i $ 个订单可以满足时,第 $ i-1 $ 个订单也可以满足.\n于是可以想到二分答案求解,差分计算每个订单,复杂度 $ O(n\\log{n}) $ .\n#include\u0026lt;cstdio\u0026gt; #include\u0026lt;cstring\u0026gt; #include\u0026lt;algorithm\u0026gt; using namespace std; long long num[1000006]; long long r[1000006],n,m,res; struct Node{ long long l,r,k; }node[1000006]; int check(long long x){ res=0; memset(num,0,sizeof num); for(int i=1;i\u0026lt;=x;i++){ num[node[i].l]+=node[i].k; num[node[i].r+1]-=node[i].k; } for(int i=1;i\u0026lt;=n;i++){ res+=num[i]; if(res\u0026gt;r[i]){ return 0; } } return 1; } int main(){ scanf(\u0026#34;%lld%lld\u0026#34;,\u0026amp;n,\u0026amp;m); for(int i=1;i\u0026lt;=n;i++){ scanf(\u0026#34;%lld\u0026#34;,\u0026amp;r[i]); } for(int i=1;i\u0026lt;=m;i++){ scanf(\u0026#34;%lld%lld%lld\u0026#34;,\u0026amp;node[i].k,\u0026amp;node[i].l,\u0026amp;node[i].r); } long long l=0,r=m; while(l\u0026lt;r){ long long mid=(l+r+1)\u0026gt;\u0026gt;1; if(check(mid)){ l=mid; } else{ r=mid-1; } } if(l==m){ printf(\u0026#34;0\u0026#34;); } else{ printf(\u0026#34;-1\\n%d\u0026#34;,l+1); } return 0; } 注意开long long(大悲)\n","date":"2023-08-14T13:42:13+08:00","permalink":"https://findnick.top/post/luogu-p1083/","section":"post","tags":["algorithm","solution"],"title":"洛谷P1083"},{"categories":null,"contents":"$ O(n) $ 做法\n首先预处理一个数组res[i],表示第 $ 1 $ 到 $ i $ 的客栈中编号最大且满足最低消费小于等于q的客栈编号;\n维护一个前缀和数组ans[i][j],i为颜色,j为编号, $ O(1) $ 求出 1~j 中有多少个颜色为i的客栈;\n枚举较大的客栈的编号i,1~res[i] 是不考虑颜色因素所能选的区间,ans[i][res[i]]即是右端点为i时的答案.\n注意当res[i]=i时,因为一个客栈不能选两次,因此答案要减一.\n累加即可.\n#include\u0026lt;cstdio\u0026gt; #include\u0026lt;cstring\u0026gt; using namespace std; int n,k,p; int a[200005],b,res[200005],ans[55][200005]; long long ret=0; int main(){ memset(res,-1,sizeof res); scanf(\u0026#34;%d%d%d\u0026#34;,\u0026amp;n,\u0026amp;k,\u0026amp;p); for(int i=1;i\u0026lt;=n;i++){ scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;a[i],\u0026amp;b); if(b\u0026lt;=p){ res[i]=i; } else{ res[i]=res[i-1]; } } for(int i=1;i\u0026lt;=n;i++){ for(int type=0;type\u0026lt;=k;type++){ ans[type][i]=ans[type][i-1]; if(a[i]==type){ ans[type][i]++; } } } for(int i=1;i\u0026lt;=n;i++){ if(i==res[i]){ ret--; } ret+=ans[a[i]][res[i]]; } printf(\u0026#34;%lld\u0026#34;,ret); return 0; } ","date":"2023-08-14T13:41:59+08:00","permalink":"https://findnick.top/post/luogu-p1311/","section":"post","tags":["algorithm","solution"],"title":"洛谷P1311"},{"categories":null,"contents":"前缀和 作用:求区间和\n时间复杂度: $ O(n) $ 预处理, $ O(1) $ 查询.\n预处理 假设原数组为$ a_1,a_2,a_3,\u0026hellip; $\n前缀和数组\n$ sum_1=a_1 $\n$ sum_2=a_1+a_2=sum_1+a_2 $\n$ sum_3=a_1+a_2+a_3=sum_2+a_3 $\n$ \u0026hellip; $\n查询 查询 $ [l,r] $ 区间内和：\n$ a_l+a_{l+1}+a_{l+2}+\u0026hellip;+a_{r-1}+a_{r} $\n$ =(a_1+a_2+\u0026hellip;+a_{r-1}+a_r)-(a_1+a_2+\u0026hellip;+a_{l-2}+a_{l-1}) $\n$ =sum_r-sum_{l-1} $\n差分 作用:区间加\n时间复杂度: $ O(n) $ 预处理, $ O(1) $ 修改.\n本质上是前缀和的逆运算.\n区间加 通过对前缀和的研究,可以发现,当 a[k] 增加了 x 时,\nsum[k],sum[k+1], $ \u0026hellip; $ 都增加了 $ x $ .\n这样就实现了区间加.\n对 $ [l,r] $ 区间进行加 $ x $ 操作时,只需将 sum[l] 增加 x , 并将 sum[r+1] 增加 -x 即可.\n预处理 求差分数组 d (将原数组 a 当作前缀和).\na[i]=a[i-1]+d[i]\n移项,\na[i]-a[i-1]=d[i]\n这样就完成了转换.\n应用 二维前缀和 预处理 基于容斥原理.\nsum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+a[i][j]\n查询 求 $ (x_1,y_1) $ 到 $ (x_2,y_2) $ 的和.\n$ \\sum_{i=x_1}^{x_2} \\sum_{j=y_1}^{y_2} a_{i,j} $ = sum[x2][y2]-sum[x1-1][y2]-sum[x2][y1-1]+sum[x1-1][y1-1].\n","date":"2023-08-11T21:27:09+08:00","permalink":"https://findnick.top/post/prefixsum/","section":"post","tags":["algorithm"],"title":"前缀和\u0026差分"},{"categories":null,"contents":"在互联网上属于FN的小角落.\n","date":"2023-08-10T20:40:09+08:00","permalink":"https://findnick.top/about/","section":"","tags":null,"title":"About"},{"categories":null,"contents":"前提条件-满足单调性 满足单调性:\n✅✅✅✅✅✅❌❌❌❌ (求最大值)\n❌❌❌✅✅✅✅✅✅✅ (求最小值)\n不满足单调性:\n✅❌✅✅✅❌ (建议直接暴力)\n求最大值 例子 在✅✅✅✅✅✅❌❌❌❌中查找最大的✅\n$ L=1,R=10,MID=(1+10+1)/2=6 $\n✅✅✅✅✅✅❌❌❌❌\n满足,所以 $ L=MID=6 $\n$ L=6,R=10,MID=(6+10+1)/2=8 $\n✅✅✅✅✅✅❌❌❌❌\n不满足,所以 $ R=MID-1=7 $\n$ L=6,R=7,mid=(6+7+1)/2=7 $\n✅✅✅✅✅✅❌❌❌❌\n不满足,所以 $ R=MID-1=6 $\n因为 $ L=R $ ,所以二分结束.\ncode while(l\u0026lt;r){ int mid=(l+r+1)/2; if(check(mid)){ l=mid; } else{ r=mid-1; } } 求最小值 例子 在❌❌❌✅✅✅✅✅✅✅中查找最小的✅\n$ L=1,R=10,MID=(1+10)/2=5 $\n❌❌❌✅✅✅✅✅✅✅\n满足,所以 $ R=MID=5 $\n$ L=1,R=5,MID=(1+5)/2=3 $\n❌❌❌✅✅✅✅✅✅✅\n不满足,所以 $ L=MID+1=4 $\n$ L=4,R=5,MID=(4+5)/2=4 $\n❌❌❌✅✅✅✅✅✅✅\n满足,所以 $ R=4 $\n因为 $ L=R $ ,所以二分结束.\ncode while(l\u0026lt;r) { long long mid=(l+r)/2; if(check(mid)) { r=mid; } else { l=mid+1; } } ","date":"2023-08-10T20:13:23+08:00","permalink":"https://findnick.top/post/binary-search/","section":"post","tags":["algorithm"],"title":"二分"}]<br /></span></span>\No newline at end of file</code>
                        </div>
                    </section>
                </div>
            </section>
        </div>
        <div xmlns="http://www.w3.org/1999/xhtml" id="metrics-end"></div>
    </foreignObject>
</svg>